
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ID NL NUMBERZ : codecode : op codeopcode : codeop : NL codecodeop : op : '!' exprop : '?' IDop : ID '=' exprexpr : term '*' exprexpr : term '/' exprexpr : termterm : factor '+' termterm : factor '-' termterm : factorfactor : NUMBERfactor : IDfactor : '(' expr ')'"
    
_lr_action_items = {'$end':([0,1,2,3,7,8,9,10,11,12,13,15,17,23,24,25,26,27,28,],[-3,0,-1,-5,-2,-3,-6,-11,-14,-15,-16,-7,-4,-8,-9,-10,-12,-13,-17,]),'!':([0,8,],[4,4,]),'?':([0,8,],[5,5,]),'ID':([0,4,5,8,14,16,18,19,20,21,],[6,13,15,6,13,13,13,13,13,13,]),'NL':([3,9,10,11,12,13,15,23,24,25,26,27,28,],[8,-6,-11,-14,-15,-16,-7,-8,-9,-10,-12,-13,-17,]),'NUMBER':([4,14,16,18,19,20,21,],[12,12,12,12,12,12,12,]),'(':([4,14,16,18,19,20,21,],[14,14,14,14,14,14,14,]),'=':([6,],[16,]),'*':([10,11,12,13,26,27,28,],[18,-14,-15,-16,-12,-13,-17,]),'/':([10,11,12,13,26,27,28,],[19,-14,-15,-16,-12,-13,-17,]),')':([10,11,12,13,22,24,25,26,27,28,],[-11,-14,-15,-16,28,-9,-10,-12,-13,-17,]),'+':([11,12,13,28,],[20,-15,-16,-17,]),'-':([11,12,13,28,],[21,-15,-16,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Z':([0,],[1,]),'code':([0,8,],[2,17,]),'op':([0,8,],[3,3,]),'codeop':([3,],[7,]),'expr':([4,14,16,18,19,],[9,22,23,24,25,]),'term':([4,14,16,18,19,20,21,],[10,10,10,10,10,26,27,]),'factor':([4,14,16,18,19,20,21,],[11,11,11,11,11,11,11,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Z","S'",1,None,None,None),
  ('Z -> code','Z',1,'p_Start','parser.py',11),
  ('code -> op codeop','code',2,'p_code1','parser.py',13),
  ('code -> <empty>','code',0,'p_code2','parser.py',14),
  ('codeop -> NL code','codeop',2,'p_codeop1','parser.py',16),
  ('codeop -> <empty>','codeop',0,'p_codeop0','parser.py',17),
  ('op -> ! expr','op',2,'p_op1','parser.py',19),
  ('op -> ? ID','op',2,'p_op2','parser.py',20),
  ('op -> ID = expr','op',3,'p_op3','parser.py',21),
  ('expr -> term * expr','expr',3,'p_expr1','parser.py',23),
  ('expr -> term / expr','expr',3,'p_expr2','parser.py',24),
  ('expr -> term','expr',1,'p_expr3','parser.py',25),
  ('term -> factor + term','term',3,'p_term1','parser.py',27),
  ('term -> factor - term','term',3,'p_term2','parser.py',28),
  ('term -> factor','term',1,'p_term3','parser.py',29),
  ('factor -> NUMBER','factor',1,'p_factor1','parser.py',31),
  ('factor -> ID','factor',1,'p_factor2','parser.py',32),
  ('factor -> ( expr )','factor',3,'p_factor3','parser.py',33),
]
