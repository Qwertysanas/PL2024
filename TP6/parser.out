Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Z
Rule 1     Z -> code
Rule 2     code -> op codeop
Rule 3     code -> <empty>
Rule 4     codeop -> NL code
Rule 5     codeop -> <empty>
Rule 6     op -> ! expr
Rule 7     op -> ? ID
Rule 8     op -> ID = expr
Rule 9     expr -> term infix6
Rule 10    infix6 -> + expr
Rule 11    infix6 -> - expr
Rule 12    infix6 -> <empty>
Rule 13    term -> factor infix7
Rule 14    infix7 -> * term
Rule 15    infix7 -> / term
Rule 16    infix7 -> <empty>
Rule 17    factor -> NUMBER
Rule 18    factor -> ID
Rule 19    factor -> ( expr )

Terminals, with rules where they appear

!                    : 6
(                    : 19
)                    : 19
*                    : 14
+                    : 10
-                    : 11
/                    : 15
=                    : 8
?                    : 7
ID                   : 7 8 18
NL                   : 4
NUMBER               : 17
error                : 

Nonterminals, with rules where they appear

Z                    : 0
code                 : 1 4
codeop               : 2
expr                 : 6 8 10 11 19
factor               : 13
infix6               : 9
infix7               : 13
op                   : 2
term                 : 9 14 15

Parsing method: LALR

state 0

    (0) S' -> . Z
    (1) Z -> . code
    (2) code -> . op codeop
    (3) code -> .
    (6) op -> . ! expr
    (7) op -> . ? ID
    (8) op -> . ID = expr

    $end            reduce using rule 3 (code -> .)
    !               shift and go to state 4
    ?               shift and go to state 5
    ID              shift and go to state 6

    Z                              shift and go to state 1
    code                           shift and go to state 2
    op                             shift and go to state 3

state 1

    (0) S' -> Z .



state 2

    (1) Z -> code .

    $end            reduce using rule 1 (Z -> code .)


state 3

    (2) code -> op . codeop
    (4) codeop -> . NL code
    (5) codeop -> .

    NL              shift and go to state 8
    $end            reduce using rule 5 (codeop -> .)

    codeop                         shift and go to state 7

state 4

    (6) op -> ! . expr
    (9) expr -> . term infix6
    (13) term -> . factor infix7
    (17) factor -> . NUMBER
    (18) factor -> . ID
    (19) factor -> . ( expr )

    NUMBER          shift and go to state 12
    ID              shift and go to state 13
    (               shift and go to state 14

    expr                           shift and go to state 9
    term                           shift and go to state 10
    factor                         shift and go to state 11

state 5

    (7) op -> ? . ID

    ID              shift and go to state 15


state 6

    (8) op -> ID . = expr

    =               shift and go to state 16


state 7

    (2) code -> op codeop .

    $end            reduce using rule 2 (code -> op codeop .)


state 8

    (4) codeop -> NL . code
    (2) code -> . op codeop
    (3) code -> .
    (6) op -> . ! expr
    (7) op -> . ? ID
    (8) op -> . ID = expr

    $end            reduce using rule 3 (code -> .)
    !               shift and go to state 4
    ?               shift and go to state 5
    ID              shift and go to state 6

    code                           shift and go to state 17
    op                             shift and go to state 3

state 9

    (6) op -> ! expr .

    NL              reduce using rule 6 (op -> ! expr .)
    $end            reduce using rule 6 (op -> ! expr .)


state 10

    (9) expr -> term . infix6
    (10) infix6 -> . + expr
    (11) infix6 -> . - expr
    (12) infix6 -> .

    +               shift and go to state 19
    -               shift and go to state 20
    NL              reduce using rule 12 (infix6 -> .)
    $end            reduce using rule 12 (infix6 -> .)
    )               reduce using rule 12 (infix6 -> .)

    infix6                         shift and go to state 18

state 11

    (13) term -> factor . infix7
    (14) infix7 -> . * term
    (15) infix7 -> . / term
    (16) infix7 -> .

    *               shift and go to state 22
    /               shift and go to state 23
    +               reduce using rule 16 (infix7 -> .)
    -               reduce using rule 16 (infix7 -> .)
    NL              reduce using rule 16 (infix7 -> .)
    $end            reduce using rule 16 (infix7 -> .)
    )               reduce using rule 16 (infix7 -> .)

    infix7                         shift and go to state 21

state 12

    (17) factor -> NUMBER .

    *               reduce using rule 17 (factor -> NUMBER .)
    /               reduce using rule 17 (factor -> NUMBER .)
    +               reduce using rule 17 (factor -> NUMBER .)
    -               reduce using rule 17 (factor -> NUMBER .)
    NL              reduce using rule 17 (factor -> NUMBER .)
    $end            reduce using rule 17 (factor -> NUMBER .)
    )               reduce using rule 17 (factor -> NUMBER .)


state 13

    (18) factor -> ID .

    *               reduce using rule 18 (factor -> ID .)
    /               reduce using rule 18 (factor -> ID .)
    +               reduce using rule 18 (factor -> ID .)
    -               reduce using rule 18 (factor -> ID .)
    NL              reduce using rule 18 (factor -> ID .)
    $end            reduce using rule 18 (factor -> ID .)
    )               reduce using rule 18 (factor -> ID .)


state 14

    (19) factor -> ( . expr )
    (9) expr -> . term infix6
    (13) term -> . factor infix7
    (17) factor -> . NUMBER
    (18) factor -> . ID
    (19) factor -> . ( expr )

    NUMBER          shift and go to state 12
    ID              shift and go to state 13
    (               shift and go to state 14

    expr                           shift and go to state 24
    term                           shift and go to state 10
    factor                         shift and go to state 11

state 15

    (7) op -> ? ID .

    NL              reduce using rule 7 (op -> ? ID .)
    $end            reduce using rule 7 (op -> ? ID .)


state 16

    (8) op -> ID = . expr
    (9) expr -> . term infix6
    (13) term -> . factor infix7
    (17) factor -> . NUMBER
    (18) factor -> . ID
    (19) factor -> . ( expr )

    NUMBER          shift and go to state 12
    ID              shift and go to state 13
    (               shift and go to state 14

    expr                           shift and go to state 25
    term                           shift and go to state 10
    factor                         shift and go to state 11

state 17

    (4) codeop -> NL code .

    $end            reduce using rule 4 (codeop -> NL code .)


state 18

    (9) expr -> term infix6 .

    NL              reduce using rule 9 (expr -> term infix6 .)
    $end            reduce using rule 9 (expr -> term infix6 .)
    )               reduce using rule 9 (expr -> term infix6 .)


state 19

    (10) infix6 -> + . expr
    (9) expr -> . term infix6
    (13) term -> . factor infix7
    (17) factor -> . NUMBER
    (18) factor -> . ID
    (19) factor -> . ( expr )

    NUMBER          shift and go to state 12
    ID              shift and go to state 13
    (               shift and go to state 14

    expr                           shift and go to state 26
    term                           shift and go to state 10
    factor                         shift and go to state 11

state 20

    (11) infix6 -> - . expr
    (9) expr -> . term infix6
    (13) term -> . factor infix7
    (17) factor -> . NUMBER
    (18) factor -> . ID
    (19) factor -> . ( expr )

    NUMBER          shift and go to state 12
    ID              shift and go to state 13
    (               shift and go to state 14

    expr                           shift and go to state 27
    term                           shift and go to state 10
    factor                         shift and go to state 11

state 21

    (13) term -> factor infix7 .

    +               reduce using rule 13 (term -> factor infix7 .)
    -               reduce using rule 13 (term -> factor infix7 .)
    NL              reduce using rule 13 (term -> factor infix7 .)
    $end            reduce using rule 13 (term -> factor infix7 .)
    )               reduce using rule 13 (term -> factor infix7 .)


state 22

    (14) infix7 -> * . term
    (13) term -> . factor infix7
    (17) factor -> . NUMBER
    (18) factor -> . ID
    (19) factor -> . ( expr )

    NUMBER          shift and go to state 12
    ID              shift and go to state 13
    (               shift and go to state 14

    term                           shift and go to state 28
    factor                         shift and go to state 11

state 23

    (15) infix7 -> / . term
    (13) term -> . factor infix7
    (17) factor -> . NUMBER
    (18) factor -> . ID
    (19) factor -> . ( expr )

    NUMBER          shift and go to state 12
    ID              shift and go to state 13
    (               shift and go to state 14

    term                           shift and go to state 29
    factor                         shift and go to state 11

state 24

    (19) factor -> ( expr . )

    )               shift and go to state 30


state 25

    (8) op -> ID = expr .

    NL              reduce using rule 8 (op -> ID = expr .)
    $end            reduce using rule 8 (op -> ID = expr .)


state 26

    (10) infix6 -> + expr .

    NL              reduce using rule 10 (infix6 -> + expr .)
    $end            reduce using rule 10 (infix6 -> + expr .)
    )               reduce using rule 10 (infix6 -> + expr .)


state 27

    (11) infix6 -> - expr .

    NL              reduce using rule 11 (infix6 -> - expr .)
    $end            reduce using rule 11 (infix6 -> - expr .)
    )               reduce using rule 11 (infix6 -> - expr .)


state 28

    (14) infix7 -> * term .

    +               reduce using rule 14 (infix7 -> * term .)
    -               reduce using rule 14 (infix7 -> * term .)
    NL              reduce using rule 14 (infix7 -> * term .)
    $end            reduce using rule 14 (infix7 -> * term .)
    )               reduce using rule 14 (infix7 -> * term .)


state 29

    (15) infix7 -> / term .

    +               reduce using rule 15 (infix7 -> / term .)
    -               reduce using rule 15 (infix7 -> / term .)
    NL              reduce using rule 15 (infix7 -> / term .)
    $end            reduce using rule 15 (infix7 -> / term .)
    )               reduce using rule 15 (infix7 -> / term .)


state 30

    (19) factor -> ( expr ) .

    *               reduce using rule 19 (factor -> ( expr ) .)
    /               reduce using rule 19 (factor -> ( expr ) .)
    +               reduce using rule 19 (factor -> ( expr ) .)
    -               reduce using rule 19 (factor -> ( expr ) .)
    NL              reduce using rule 19 (factor -> ( expr ) .)
    $end            reduce using rule 19 (factor -> ( expr ) .)
    )               reduce using rule 19 (factor -> ( expr ) .)

